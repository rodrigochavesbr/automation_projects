---
- name: Initial tasks
  block:
    - name: Clean SSS folder from endpoint
      ansible.builtin.file:
        path: "{{ home }}/"
        state: absent
        force: true
      become: true
      failed_when: "'sss' not in home and not ansible_check_mode"

    - name: Delete last scan results from endpoint
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      become: true
      with_items:
        - "{{ home }}/sss/subs_scanner_result.txt"
        - "{{ home }}/results/"
      failed_when: false

    - name: Check if SSS exists on NEXT
      ansible.builtin.stat:
        path: "{{ sss_path }}/sss.tar.gz"
      register: sss_exists
      delegate_to: localhost

    - name: Delete old SSS files if exists
      ansible.builtin.file:
        path: "{{ sss_path }}/sss.tar.gz"
        state: absent
      become: true
      when: sss_exists.stat.exists and options.delete_sss_files
      register: sss_files_deleted

    - name: Create directory to copy files on endpoint
      ansible.builtin.file:
        path: "{{ home }}/results"
        state: directory
        mode: '0777'
      become: true

  rescue:
    - name: Failed to run SSS error 4
      ansible.builtin.debug:
        msg: "{{ 'Error code 4 - Permission failure' if ansible_failed_result is defined
                and 'not allowed to execute' in ansible_failed_result.module_stdout else '' }}"
      register: task_failed
      when: task_failed | default(false) | bool

- name: Transfer SSS files for Non-Solaris
  when: ansible_os_family != "Solaris"
  block:
    - name: Copy required files
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ home }}/"
        mode: '0700'
        owner: 'root'
        force: true
      become: true
      with_items:
        - "{{ role_path }}/files/sss.tar.gz"
        - "{{ role_path }}/files/wscanhw_config.xml"
      register: sss_copy

    - name: Extract SSS
      ansible.builtin.shell: gunzip < sss.tar.gz | tar xf -
      args:
        chdir: "{{ home }}"
        warn: false
      changed_when: false
      become: true
      register: sss_unarchive

- name: Transfer SSS files for Solaris
  when: ansible_os_family == "Solaris"
  block:
    - name: Copy required files for Solaris
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ home }}/"
        mode: '0700'
        owner: 'root'
        force: true
      become: true
      with_items:
        - "{{ role_path }}/files/sss_solaris.tar"
        - "{{ role_path }}/files/wscanhw_config.xml"
      register: sss_copy_solaris

    - name: Extract sss_solaris
      ansible.builtin.unarchive:
        src: "{{ home }}/sss_solaris.tar"
        dest: "{{ home }}/"
        remote_src: true
      become: true
      register: sss_unarchive_solaris

- name: General Configuration
  block:
    - name: Changing File Mode To Executable
      ansible.builtin.file:
        dest: "{{ home }}/sss/"
        mode: "0755"
        recurse: true
      become: true

    - name: Delete sdms properties file
      ansible.builtin.file:
        path: "{{ home }}/sdms.properties"
        state: absent
      become: true

    - name: Create sdms properties file
      ansible.builtin.file:
        path: "{{ home }}/sdms.properties"
        state: touch
        mode: '0777'
      become: true

    - name: Update sdms properties file
      ansible.builtin.lineinfile:
        path: "{{ home }}/sdms.properties"
        line: "{{ item.line }}"
      become: true
      loop:
        - line: 'SSL_ENABLED=false'
        - line: 'SSL_COLD_START=false'
        - line: 'SSL_ENABLE_PFILES=false'
        - line: 'SSL_ENABLE_KDB=false'
        - line: 'EXCLUDE_SCAN_LIST=cbs cfs dir ilk ina nco noc oic osl res rsa scm sck smm ssl ssk t4d tdm tim tiv tpm {{ exclude_scan_list }}'
        - line: 'DEBUG_MODE=Y'
        - line: 'DEBUG=ALL'
        - line: 'TEMP_DIR_SWITCH={{ "Y" if change_temp_dir is defined and change_temp_dir | lower | trim in change_temp_dir_enabled else "N" }}'
      vars:
        change_temp_dir_enabled: ["y", "yes", "true", "on", "1"]

  rescue:
    - name: Failed to run SSS error 7
      ansible.builtin.debug:
        msg: "Exit code 7 - Failed to copy or extract SSS or config for hardware scan files"
      register: task_failed
      when: task_failed|default(false)|bool

- name: Start scripts
  when: task_failed is not defined
  block:
    - name: Run Shell Script On Unix Endpoint
      ansible.builtin.shell:
        cmd: "sh subs_all.sh {{ home }}/sdms.properties > ../results/computersystem.log"
        chdir: "{{ home }}/sss/"
      async: "{{ '800' if execution_timeout is not defined or execution_timeout | int < 0 else (execution_timeout | int) }}"
      poll: 30
      become: true
      changed_when: false

    - name: Run computersystem
      ansible.builtin.script: files/computersystem.sh "{{ home }}/sss/subs_scanner_result.txt" "{{ home }}/results/{{ hostname }}.json"
      args:
        chdir: "{{ home }}"
      become: true

    - name: Check hardware scan executable
      ansible.builtin.stat:
        path: "{{ ansible_home }}/GTS/CIT/cit/bin/wscanhw"
      register: wscanhw
      become: true

    - name: Run hardware scan
      ansible.builtin.shell: "{{ ansible_home }}/GTS/CIT/cit/bin/wscanhw -nolock -c {{ home }}/wscanhw_config.xml > {{ home }}/results/wscanhw.xml"
      become: true
      failed_when: false
      when: wscanhw.stat.exists
      changed_when: false

  rescue:
    - name: Failed to run SSS
      ansible.builtin.debug:
        msg: "Error code unknown - Check error {{ ansible_failed_result }}"
      register: task_failed
      when: task_failed|default(false)|bool

- name: Copy results
  block:
    - name: Copy SSS result
      ansible.builtin.copy:
        src: "{{ home }}/sss/subs_scanner_result.txt"
        dest: "{{ home }}/results/"
        remote_src: true
        force: true
        mode: preserve
      become: true

    - name: Archive results
      community.general.archive:
        path:
          - "{{ home }}/results/*"
        dest: "{{ home }}/results/{{ hostname }}.tgz"
        mode: '0644'
      become: true

    - name: Copy archived file
      ansible.builtin.fetch:
        src: "{{ home }}/results/{{ hostname }}.tgz"
        dest: "{{ local_path }}/{{ hostname }}.tgz"
        flat: true
      become: true

  rescue:
    - name: Failed to run SSS error 8
      ansible.builtin.debug:
        msg: "Error code 8 - Failed to copy results"
      register: task_failed
      when: task_failed|default(false)|bool
